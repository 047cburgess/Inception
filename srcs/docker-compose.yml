
secrets:
  nginx_cert:
    file: ../secrets/ssl/inception.crt
  nginx_key:
    file: ../secrets/ssl/inception.key
  mysql_password:
    file: ../secrets/db_password.txt
  mysql_root_password:
    file: ../secrets/db_root_password.txt
  wordpress_db_admin_password:
    file: ../secrets/db_password.txt
  wordpress_db_user_password:
    file: ../secrets/user_db_password.txt

services:
  portainer:
    container_name: portainer
    image: portainer:1.0
    networks:
      - inception
    build:
      context:  requirements/bonus/portainer
    env_file: .env
    ports:
      - "9000:9000"
    volumes:
     - /var/run/docker.sock:/var/run/docker.sock
     - portainer:/data
    restart: on-failure

  mariadb:
    container_name: mariadb
    image: mariadb:1.0
    networks:
      - inception
    build:
      context:  requirements/mariadb
    secrets:
      - mysql_password
      - mysql_root_password
    environment:
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    volumes:
     - mariadb:/var/lib/mysql
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$(< /run/secrets/mysql_root_password)"]
      interval: 5s
      timeout: 3s
      retries: 5
    

  nginx:
    container_name: nginx
    image: nginx:1.0
    volumes:
      - wordpress:/var/www/wordpress
    networks:
      - inception
    depends_on:
      - wordpress
      - staticsite
    build: 
      context: requirements/nginx
    secrets:
      - nginx_cert
      - nginx_key
    environment:
      DOMAIN_NAME: ${DOMAIN_NAME}
    ports:
      - "443:443"
    restart: on-failure

  wordpress:
    container_name: wordpress
    image: wordpress:1.0
    volumes:
      - wordpress:/var/www/wordpress
    networks:
      - inception
    build: 
      context: requirements/wordpress
      dockerfile: Dockerfile
    secrets:
      - wordpress_db_admin_password
      - wordpress_db_user_password
    environment:
      WORDPRESS_DB_HOST: ${WORDPRESS_DB_HOST}
      WORDPRESS_DB_ADMIN: ${WORDPRESS_DB_ADMIN}
      WORDPRESS_DB_ADMIN_EMAIL: ${WORDPRESS_DB_ADMIN_EMAIL}
      WORDPRESS_DB_NAME: ${WORDPRESS_DB_NAME}
      WORDPRESS_DB_USER: ${WORDPRESS_DB_USER}
      WORDPRESS_DB_USER_EMAIL: ${WORDPRESS_DB_USER_EMAIL}
      WORDPRESS_TITLE: ${WORDPRESS_TITLE}
      WORDPRESS_URL: ${WORDPRESS_URL}
      WP_REDIS_HOST: ${WP_REDIS_HOST}
      WP_REDIS_PORT: ${WP_REDIS_PORT}
    depends_on:
      mariadb:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: on-failure

  redis:
    container_name: redis
    env_file: .env
    image: redis:1.0
    volumes:
      - redis:/var/lib/redis
    networks:
      - inception
    build: 
      context: requirements/bonus/redis
    restart: on-failure
    healthcheck:
      test: ["CMD", "redis-cli", "set", "healthcheck", "1"]
      interval: 10s
      timeout: 3s
      retries: 5

  ftp:
    container_name: ftp
    image: ftp:1.0
    build: 
      context: requirements/bonus/ftp
    env_file: .env
    networks:
      - inception
    volumes:
      - wordpress:/var/www/wordpress
    ports:
      - "21:21"
      - "21000-21010:21000-21010"
    restart: on-failure
    depends_on:
      - wordpress

  adminer:
    container_name: adminer
    image: adminer:1.0
    build: 
      context: requirements/bonus/adminer
    env_file: .env
    networks:
      - inception
    ports:
      - "8080:8080"
    restart: on-failure
    depends_on:
      - mariadb
      - wordpress
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/adminer.php"]
      interval: 10s
      retries: 5
      timeout: 5s

  staticsite:
    container_name: staticsite
    image: staticsite:1.0
    build: 
      context: requirements/bonus/staticsite
    env_file: .env
    networks:
      - inception
    ports:
      - "1200:80"
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 10s
      retries: 5
      timeout: 5s

volumes:
  mariadb:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/home/caburges/data/mariadb'

  wordpress:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/home/caburges/data/wordpress'

  redis:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/home/caburges/data/redis'

  portainer:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/home/caburges/data/portainer'
 
networks:
  inception:
    driver: bridge